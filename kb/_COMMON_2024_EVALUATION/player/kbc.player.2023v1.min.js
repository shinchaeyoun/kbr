/*
	KbcPlayer 2023v1
	
	KbcPlayer(@param{name:variable type(default value)})

	KbcPlayer({
		"강제진도율":float (0),
		"진도완료여부":boolean (true),
		"초기볼륨":float (1),
		"메세지함수":function(@param string) (null),
		"비디오컨테이너":string (".video-container"),
		"컨트롤러숨김기능":boolean (true),
		"컨트롤러사용":boolean (true),
		"컨트롤러숨김시간":interger (3000)
		"키보드컨트롤기능":boolean (true),
		"스킨경로":string ("default"),
		"영상경로":string (""),
		"자막경로":string (""),
		"사용모듈":array[string...],
		"로컬키":string (null),
		"자동재생":boolean (false),
		"시작시간":integer (0)
	});

	//모듈추가/////////////////////////////////////////////////////////////////////////
	;(function(root,name,factory){
		if(root[name]){
			root[name].addModule("모듈이름",factory(root[name]));
		}else{
			throw new Error(name+" isn't defined.")
		}	
	}(window,"KbcPlayer",function(m_exports){	
		return(function(modules){
			var exports = {};
			modules.forEach(function(m){
				var module = {name:"",exports:{}};
				m.call(module.exports,module,exports,m_exports);
				if(module.name)exports[module.name] = module.exports;
			});
			return exports;
		})([
			//필수////////////////////////////////
			(function(module,exports,m_exports){
				function init(){}
				module.name = "init";
				module.exports =init
			}),
			//선택////////////////////////////////
			(function(module,exports,m_exports){
				function dispose(){}
				module.name = "dispose";
				module.exports =dispose
			}),
			//속성//////////////////////////////
			(function(module,exports,m_exports){
				var ClassProperty ={};
				module.name = "ClassProperty";
				module.exports = ClassProperty;
			}),
			//프로토타입//////////////////////////////////
			(function(module,exports,m_exports){
				var ClassPrototype = {}
				module.name = "ClassPrototype";
				module.exports = ClassPrototype;
			})
		]);
	}));	
*/
//pollyfill///////////////////////////////////////////////////////////////////////////////////
;(function(root){
	if (!Array.prototype.forEach){
		Array.prototype.forEach = function (fun){
			if (this === void 0 || this === null){
				throw new TypeError();
			}
	
			var t = Object(this);
			var len = t.length >>> 0;
	
			if (typeof fun !== 'function'){
				throw new TypeError();
			}
	
			var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
	
			for (var i = 0; i < len; i++)
			{
				if (i in t)
				{
					fun.call(thisArg, t[i], i, t);
				}
			}
		};
	}
	if (!Array.isArray){
		Array.isArray = function (arg){
			return Object.prototype.toString.call(arg) === '[object Array]';
		};
	}
	
	if (root.NodeList && !NodeList.prototype.forEach) {
		NodeList.prototype.forEach = Array.prototype.forEach;
	}
	if (!root.console){
		root.console = {};
		root.console.log = root.console.assert = function(){};
		root.console.warn = root.console.assert = function(){};
	}
	//trigger
	
	if(root.Node && (!Node.prototype.trigger || !root.trigger || document.trigger)){
		Node.prototype.trigger=root.trigger=document.trigger= function(type,data){
			var event;
			if(data){
				if (root.CustomEvent && typeof root.CustomEvent === 'function') {
					event = new CustomEvent(type,{detail:{data:data}});
				}else{
					event = document.createEvent("CustomEvent");
					event.initCustomEvent(type, true, true, {data: data});
				}
			}else{
				event = document.createEvent("HTMLEvents");
				event.initEvent(type,true,false);
			}
			this.dispatchEvent(event);
		}
	};
}(window));

//kbc.player//////////////////////////////////////////////////////////////////////////////////
;(function(root,name,factory){
	if(root[name]){
		console.log("["+name+"] already defined.")
	}else{
		console.log(name +" 2023v1 init...");
		root[name] = factory(name);
	}
}(window,"KbcPlayer",function(NAME){
	return(function(modules){
		var exports = function(){
			
			if(this.constructor.name == undefined){
				this.constructor.name = (Object.prototype.toString.call(this.constructor) == "[object Window]") ? "Window" : "Object";	
			} 

			if(this.constructor.name == "Window"){
				return window[NAME].PlayerInit(arguments[0]);
			}else{
				throw new Error(NAME +" can not instances..")
			}
		};

		modules.forEach(function(m){
			var module = {name:"",type:"",exports:{}};
			m.call(module.exports,module,exports,NAME);
			if(module.name) exports[module.name] = module.exports;
				
		});
		 
		return exports;
	})([
		/*모듈 기본 속성*************************************************************************************/
		(function(mod,EXP,NAME){
			function getScriptPath(name){
				var path =""

				document.querySelectorAll("script").forEach(function(v){
					var src = v.getAttribute("src")
					if(src.indexOf(name) !=-1){
						if(src.lastIndexOf("/")==-1){
							path = "./"
						}else{
							path = src.replace(/\\/g,'/').replace(/\/[^\/]*\/?$/, '') + "/";
						}
						return false;
					}
				});
				return path; 
			};

			Object.defineProperties(EXP,{
				PLAYER_LIST:{
					value:{}
				},
				SKIN_PATH:{
					value:getScriptPath("kbc.player")+"skin/"
				},
				MODULES:{
					value:{}
				},
				EVENT:{
					value:{
						MSG:{
							START:"study_start",
							LOCKED:"study_locked",
							CHECKED:"study_checked",
							STUDING:"studying",
							FINISHED:"study_finished"
						},
						VOD:{
							LOAD_META:"loadedmetadata",
							LOAD_DATA:"loadeddata",
							PLAYING:"playing",
							PAUSE:"pause",
							END:"ended",
							PROGRESS:"progress",
							SEEKED:"seeked",
							SEEKING:"seeking",
							WAITING:"waiting",
							ERROR:"error",
							CAN_PLAY_TH:"canplaythrough",
							CAN_PLAY:"canplay",
							STALL:"stalled",
							TIME_UPATE:"timeupdate",
							STATUS:"statusChange"
						}
					}
				}
			});
			//mp4 재생가능여부
			var v = document.createElement('video');
			if(v.canPlayType && v.canPlayType('video/mp4').replace(/no/, '')) {
				Object.defineProperty(EXP,"CAN_PLAY",{value:true})
				if(v.canPlayType('application/vnd.apple.mpegurl')){
					Object.defineProperty(EXP,"CAN_PLAY_HLS_BASIC",{value:true})
				}else{
					Object.defineProperty(EXP,"CAN_PLAY_HLS_BASIC",{value:false})
					try{
						if(Hls.isSupported())
							Object.defineProperty(EXP,"CAN_PLAY_HLS_JS",{value:true});
						
					}catch(e){
						Object.defineProperty(EXP,"CAN_PLAY_HLS_JS",{value:false});
					}
				}
			}else{
				throw new Error("not supproted browser.");
			}
		}),
		/*모듈 제공 공통 메쏘드*************************************************************************************/
		////extend
		(function(mod,EXP,NAME){
			
			var deepExtend = function(out) {
				out = out || {};
				
				for (var i = 1; i < arguments.length; i++) {
					var obj = arguments[i];
					
					if (!obj)continue;

					if(Array.isArray(obj)) out = [];
					
					for (var key in obj) {
						if (obj.hasOwnProperty(key)) {
							if (typeof obj[key] === 'object'){
								out[key] = Array.isArray(obj[key])?obj[key].slice(0): deepExtend(out[key], obj[key]);
							}else{
								out[key] = obj[key];
							}
						}
					}

				}
				
				return out;
			};
			mod.name = "deepExtend"
			mod.exports = deepExtend;
		}),
		////모바일 판단
		(function(module,exports){
			function mobile(){
				return (this.mobile.Android() ||this.mobile.BlackBerry() ||this.mobile.iOS() ||this.mobile.Opera() ||this.mobile.Windows()) != null;
			}

			mobile.Android = function(){
				return navigator.userAgent.match(/Android/i);
			}

			mobile.BlackBerry = function(){
				return navigator.userAgent.match(/BlackBerry/i);
			}

			mobile.iOS = function(){/////IOS코드 수정
				return navigator.userAgent.match(/iPhone|iPad|iPod/i);
				return /iPad|iPhone|iPod/.test(navigator.platform) ||
				(navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
			}

			mobile.Opera = function(){
				return navigator.userAgent.match(/Opera Mini/i);
			}

			mobile.Windows = function(){
				return navigator.userAgent.match(/IEMobile/i);
			}
			module.name = "mobile";	
			module.exports = mobile;
			exports.IS_MOB = (mobile.Android() || mobile.BlackBerry() || mobile.iOS() || mobile.Opera() || mobile.Windows()) != null;
		}),
		////로컬스토리지
		(function(module,exports){
			var LOCAL_STORAGE = {
				save:function(key,name,value){
					if(!key) return "";

					if(window.localStorage)
						return window.localStorage.setItem(key+"_"+name,value);
					
					var saveObj = {}
					try{
						saveObj = JSON.parse(window.top.name);
					}catch(e){
						saveObj[key] = {};
						window.top.name ="";
					}

					if(!saveObj[key]){
						saveObj[key] = {};
						window.top.name ="";
					}
					saveObj[key][name] = String(value);
					window.top.name = JSON.stringify(saveObj);
					
				},
				load:function(key,name){
					if(!key) return "";

					if(window.localStorage)
						return window.localStorage.getItem(key+"_"+name) || "";
					
					var saveObj = {}
					try{
						saveObj = JSON.parse(window.top.name);
					}catch(e){
						return "";
					}

					if(!saveObj[key]) return "";

					return saveObj[key][name] || "";
					
				},
				remove:function(key,name){
					if(!key) return "";

					if(window.localStorage)
						return window.localStorage.removeItem(key+"_"+name);

					var saveObj = {}
					try{
						saveObj = JSON.parse(window.top.name);
					}catch(e){
						return "";
					}

					if(!saveObj[key]) return "";

					delete saveObj[key][name];
				},

				removeAll:function(){
					if(window.localStorage)
						return window.localStorage.clear();
					
					window.top.name = "";
				}
			}
			module.name="LOCAL_STORAGE";
			module.exports = LOCAL_STORAGE;
		}),
		////오브젝트 복제
		(function(mod,EXP,NAME){
			var Clone = {}
			Clone.property = function(base,out,revalue,option){
				revalue = revalue || {};
				option = EXP.deepExtend({configurable:false,writable:false,enumerable:false},option||{});
				Object.keys(base).forEach(function(keyA){
					var prop = base[keyA],value;
					var configurable = (prop.configurable == undefined)?option.configurable:prop.configurable;
					var writable= (prop.writable == undefined)?option.writable:prop.writable;
					var enumerable= (prop.enumerable == undefined)?option.enumerable:prop.enumerable;
					if(typeof prop === "object"){
						if(revalue[keyA] != undefined){
							value = (typeof revalue[keyA] === "object")?EXP.deepExtend(value,revalue[keyA]):revalue[keyA];
						}else{
							value = (typeof prop.value === "object")?EXP.deepExtend({},prop.value):prop.value;
						}
					}else{
						value = prop;
					}
						
					Object.defineProperty(out,keyA,{
						value:value,
						configurable:configurable,
						writable:writable,
						enumerable:enumerable
					})
				})
			};

			Clone.prototype = function(base,out){
				Object.keys(base).forEach(function(keyA){
					var proto = base[keyA];

					if(typeof proto === "function"){
						out[keyA] = proto;

					}else if(typeof proto === "object"){
						var isSetGetter = false;
						if(proto.hasOwnProperty("set") && proto.hasOwnProperty("get")){
							isSetGetter = !Object.keys(proto).some(function(ka){
								if(ka != "set" && ka != "get" && (typeof proto[ka] === "function" || typeof proto[ka] === "object"))
									return true;
							});
						};

						if(isSetGetter){
							Object.defineProperty(out,keyA,{
								set:proto.set || function(){return this},
								get:proto.get || function(){return this},
								configurable:proto.configurable || false,
								enumerable:proto.enumerable || false,
							})
						}else{
							
							out[keyA] = out.hasOwnProperty(keyA)?EXP.deepExtend({},out[keyA]):{};
							
							Object.keys(proto).forEach(function(keyB){
								
								if(typeof proto[keyB] === "function"){
									out[keyA][keyB] =function(){
										return proto[keyB].apply(EXP.PLAYER_LIST[this.CLASS_ID],arguments);
									}
								}else if(typeof proto[keyB] === "object"){
									out[keyA][keyB] = EXP.deepExtend({},proto[keyB]);
								}else{
									out[keyA][keyB] = proto[keyB];
								}
								
							});
							
						}
					}
				})
			};
			mod.name="Clone";
			mod.exports = Clone;
		}),
		//시간변환//
		(function(module,exports){

			var convertTime = function(){
				if(typeof arguments[0] ==="string"){
					return this.convertTime.toSec.call("",arguments[0])
				}else{
					return this.convertTime.toStr.apply("",arguments);
				}
			}
			convertTime.toSec = function(time){
				var time_array = time.split(":");
				var returnTime = 0;
				var tempNum = 0
				var isConTime = time_array[0].indexOf("+")!= -1;
				
				for (var i = time_array.length -1; i >= 0;--i ) {
					tempNum = Number(time_array[i])
					for (var j = i; j < time_array.length-1;++j ) {
						tempNum *=60
					}
					returnTime += tempNum;
				}
				
				return (isConTime)?"+" + returnTime:returnTime;
			}
			convertTime.toStr = function(np,timeFormat){
				var min = Math.floor(np / 60);
				var hour = Math.floor(min / 60);
				var sec = Math.floor(np - min * 60);
				min = Math.floor((np - hour * 60 * 60)/60);
				
				var rHour = (hour < 10)?"0" + String(hour):String(hour);
				var rMin = (min <10)? "0"+String(min) : String(min);
				var rSec = (sec < 10)? "0" + String(sec) : String(sec);	
	
				switch(timeFormat) {
					case "m:s":
						if(hour == 0){
							return rMin + ":" + rSec;
						}
					
					case "h:m:s":
						return rHour+":"+rMin+":"+rSec;
					
					case "분:초":
						if(hour == 0){
							return String(min) + "분 " + String(sec) + "초";
						}
	
					case "시:분:초":
						return String(hour)+" 시"+String(min)+" 분"+String(sec)+" 초";			
					default:
						return rHour+":"+rMin+":"+rSec;
				}
			}
			module.name="convertTime"
			module.exports = convertTime;
		}),
		/*상속속성/프로토타입*************************************************************************************/
		(function(mod,EXP,NAME){
			var Inherit = {prototype:{},property:{}}
			mod.name = "Inherit";
			mod.exports = Inherit;
		}),
		////[속성] 기본
		(function(mod,EXP,NAME){
			EXP.Inherit.property = {
				ID:{value:""},

				_init_option:{value:{},writable:true},

				prog_per:{value:0,writable:true},

				isProgCheck:{value:true,writable:true,enumerable:true},

				isInited:{value:false,writable:true},

				info:{
					value:{
						volume:1,currentTime:0,duration:0,rate:1.0,
					}
				},

				isSeeking:{value:false,writable:true},

				status:{value:"",writable:true,enumerable:true},

				buttons:{
					value:{
						play:null,pause:null,replay:null,
						backward:null,forward:null,
						volume:null
					}
				},

				range:{
					value:{
						pwrap:null,progress:null,pThumb:null,pCheckBar:null,
						vwrap:null,volume:null,vThumb:null
					}
				},

				vod:{value:null,writable:true},

				wrap:{value:{}},

				msg:{value:function(){},writable:true},

				_vodsrc:{value:"",writable:true},

				useModules:{value:[]},

				autoplay:{value:false},

				localKey:{value:""},

				jumpTime:{value:0,writable:true}	
			}
		}),
		////[속성] 이벤트
		(function(mod,EXP,NAME){
			EXP.Inherit.property.EVENT ={
				value:{
					MSG:{},VOD:{},
					CustomEventVOD:function(e){
						var cls = EXP.PLAYER_LIST[this.CLASS_ID];
						cls.EVENT.VOD[e.type].call(cls,e);
					},
					CustomEventMSG:function(e){
						var cls = EXP.PLAYER_LIST[this.CLASS_ID];
						cls.EVENT.MSG[e.type].call(cls,e);
					}
				}
			};
			var VOD = EXP.Inherit.property.EVENT.value.VOD,
				MSG = EXP.Inherit.property.EVENT.value.MSG;

			VOD[EXP.EVENT.VOD.LOAD_META] = function(){
				var p = this;
				p.vod.trigger(EXP.EVENT.VOD.STATUS,"buffering");
				p.duration = p.vod.duration;
				p.control.show();
				p.control.hide();

				var preWrap = p.wrap.main.querySelector(".pre_wrap");

				preWrap.querySelector("button.pre_play").addEventListener("click",function(e){
					preWrap.style.display = "none";
					
					(p.jumpTime)?p.play(p.jumpTime):p.vod.play();
				});
				p.vod.trigger(EXP.EVENT.MSG.START,"custom");
				
				if(p.autoplay){
					var prom = p.vod.play();
					
					if(prom != undefined){
						prom.then(
							function(res){
								preWrap.style.display = "none";
								if(p.jumpTime) p.play(p.jumpTime);
							},
							function(error){
								preWrap.style.display = "";
								p.vod.trigger(EXP.EVENT.VOD.STATUS,"paused");

							})
					}else{
						preWrap.style.display = "none";
						if(p.jumpTime) p.play(p.jumpTime);
					}
					
				}else{
					preWrap.style.display = "";
					p.vod.trigger(EXP.EVENT.VOD.STATUS,"paused");
				}
			};

			VOD[EXP.EVENT.VOD.LOAD_DATA] = function(){};
			
			VOD[EXP.EVENT.VOD.TIME_UPATE] = function() {
				if(this.isSeeking) return;
				this.currentTime = this.vod.currentTime;
				if(this.duration<=0) return;
				if(this.info.volume != this.vod.volume){
					this.vod.volume = this.info.volume;
				}

				var per = this.currentTime/this.duration;
				var v =parseFloat(this.range.progress.max)*per;
				this.range.progress.value = v;
				if(per>= this.prog_per && !this.isProgCheck){
					var ifrs = this.wrap.activity.querySelectorAll("iframe.active");
					var isFinished = true;
					ifrs.some(function(v){
						var m = v.contentDocument.body.querySelector(".main")
						if(!m.classList.contains("event_finished")){
							isFinished = false;
							return true;
						}
						
					});
					if(isFinished){
						this.vod.trigger(EXP.EVENT.MSG.CHECKED,"custom");
						this.isProgCheck = true;
					}
				}
				//정지 시간 판별
				this.activity.check();
				
			};
			
			VOD[EXP.EVENT.VOD.PLAYING] = function(){
				var prewrap = this.wrap.main.querySelector(".pre_wrap")
				if(prewrap) prewrap.style.display = "none";
				
				this.vod.trigger(EXP.EVENT.VOD.STATUS,"playing");
			};
			VOD[EXP.EVENT.VOD.PAUSE] = function(){
				this.vod.trigger(EXP.EVENT.VOD.STATUS,"paused");
			};
			VOD[EXP.EVENT.VOD.END] = function(){
				this.vod.trigger(EXP.EVENT.VOD.STATUS,"stopped");
			};
			VOD[EXP.EVENT.VOD.PROGRESS] = function(){
			};
			VOD[EXP.EVENT.VOD.SEEKED] = function(){
				this.vod.trigger(EXP.EVENT.VOD.STATUS,"seeked");
				if(!this.isSeeking){
					var gab = this.duration -this.vod.currentTime;
					if(gab>=1){
						this.play();
					}else{
						this.play(this.duration-1);
					}
					this.vod.trigger(EXP.EVENT.VOD.STATUS,"playing");
				}
			};
			VOD[EXP.EVENT.VOD.SEEKING] = function(){
				this.vod.trigger(EXP.EVENT.VOD.STATUS,"seeking");
			};
			VOD[EXP.EVENT.VOD.WAITING] = function(){
				this.vod.trigger(EXP.EVENT.VOD.STATUS,"buffering");
			};
			VOD[EXP.EVENT.VOD.ERROR] = function(){
				if(this._vodsrc){
					alert("Video loading Error");
				}
				
			};
			VOD[EXP.EVENT.VOD.CAN_PLAY_TH] = function(){};
			VOD[EXP.EVENT.VOD.CAN_PLAY] = function(){};
			VOD[EXP.EVENT.VOD.STALL] = function(){};
			VOD[EXP.EVENT.VOD.STATUS] = function(e){
				var st = e.detail.data;
				if(this.status != st) this.status = st;
				
				var bufferBar = this.wrap.bufferBar || {style:{}};
				bufferBar.style.display ="none";
				var buttons = this.buttons;
				switch(st){
					case "buffering":
						bufferBar.style.display ="";
						buttons.play.style.display = "";
						buttons.pause.style.display = "none";
						break;
					case "seeked": case "seeking":
						buttons.play.style.display = "";
						buttons.pause.style.display = "none";
						break;
					case "playing":
						buttons.play.style.display = "none";
						buttons.pause.style.display = "";
						this.vod.trigger(EXP.EVENT.MSG.STUDING,"custom");
					
						break;
					case "paused":
						buttons.play.style.display = "";
						buttons.pause.style.display = "none";
						break;
					case "stopped":
						if(this.info.currentTime>0){
							buttons.play.style.display = "";
							buttons.pause.style.display = "none";

							var ifrs = this.wrap.activity.querySelectorAll("iframe.active");
							var isFinished = true;
							ifrs.some(function(v){
								var m = v.contentDocument.body.querySelector(".main")							
								if(m && !m.classList.contains("event_finished")){
									isFinished = false;
									return true;
								};
							})

							if(isFinished){
								this.status = "finished";
								this.vod.classList.add("finished");

								this.control.show();
								this.vod.trigger(EXP.EVENT.MSG.FINISHED,"custom");
								if(!this.isProgCheck){
									this.vod.trigger(EXP.EVENT.MSG.CHECKED,"custom");
									this.isProgCheck = true;
								}
								
							}else{
								this.vod.trigger(EXP.EVENT.MSG.STUDING,"custom");
							}
						}
						break;
					case "disconnected":
						bufferBar.style.display ="";
						buttons.play.style.display = "";
						buttons.pause.style.display = "none";
						
						break;
				}
			};


			Object.keys(EXP.EVENT.MSG).forEach(function(ka){
				MSG[EXP.EVENT.MSG[ka]] =function(e){
					this.msg(e.type);
				}
			})
			

		}),
		////[프로토타입] 이벤트 추가 
		(function(mod,EXP,NAME){
			EXP.Inherit.prototype.addEvent = function(name,val){
				EXP.EVENT.MSG[name] = val;
				this.EVENT.MSG[val] = function(e){
					this.msg(e.type)
				}
				this.vod.addEventListener(val,this.EVENT.CustomEventMSG);
			}
		}),
		////[프로토타입] 컨트롤러 설정 관련
		(function(mod,EXP,NAME){
			EXP.Inherit.prototype.control ={
				useShowHide:true,
				useKey:true,
				useControl:true,
				delay:3000,
				skinPath:""
			};

			var t_inv = null;
			EXP.Inherit.prototype.control.show = function(){
				if(this.status == "" || this.status == "disconnected" || !this.control.useControl) return;
				if(t_inv) clearTimeout(t_inv);
				this.wrap.control.classList.add("show");
				if(this.wrap.centerBtns) this.wrap.centerBtns.classList.add("show");
				return this;
			};

			EXP.Inherit.prototype.control.hide = function(){
				if(!this.control.useShowHide) return;
				var p = this;
				if(t_inv) clearTimeout(t_inv);

				t_inv = setTimeout(function(){
					if(p.status !="finished"){

						p.wrap.control.classList.remove("show");
						if(p.wrap.centerBtns) p.wrap.centerBtns.classList.remove("show");
					}
				},p.control.delay);
				return this;
			};			
		}),
		////[프로토타입] 볼륨 관련
		(function(mod,EXP,NAME){
			EXP.Inherit.prototype.volume = {
				set:function(vol){
					vol = Math.min(1,vol);
					vol= Math.max(0,vol);
					this.info.volume = vol;

					if(this.vod.volume != this.info.volume){
						this.vod.volume = this.info.volume;
						this.localStorage.save("volume",this.vod.volume);
					}

					this.range.volume.value = parseFloat(this.range.volume.max)*vol;
					this.range.vThumb.style.left = vol*100+"%";
					this.range.vfill.style.width = this.range.vThumb.style.left;
					

					if(vol == 0){
						this.buttons.volume.classList.add("mute");
						this.vod.muted = true;
					}else{
						this.buttons.volume.classList.remove("mute");
						this.vod.muted = false;
					}
				},
				get:function(){
					return this.info.volume;
				},
				enumerable:true
			}
		}),
		////[프로토타입] 시간 관련
		(function(mod,EXP,NAME){
			EXP.Inherit.prototype.currentTime = {
				set:function(sec) {
					this.info.currentTime = isNaN(sec)?0:sec;
					var tstr= ""
					if(sec>=3600){
						tstr = EXP.convertTime(this.info.currentTime,"h:m:s");
					}else{
						tstr = EXP.convertTime(this.info.currentTime,"m:s");
					}
					this.wrap.currentTime.innerHTML = tstr;
					
					console.log()
					var per = sec/this.duration;
					var _left = (this.duration>0)?per*100+"%":"0%";
					this.range.pThumb.style.left = _left;
					this.range.pfill.style.width = this.range.pThumb.style.left;
					this.wrap.currentTime.style.left = _left;

					var pre_per = 100;
					if(this.duration>0)
						pre_per =(this.isProgCheck)?0:Math.min(parseFloat(this.range.pCheckBar.getAttribute("data-per")),100*(1-per));
					

					this.range.pCheckBar.setAttribute("data-per",pre_per);
					this.range.pCheckBar.style.width = pre_per+"%";
					this.range.pCheckBar.style.right = -this.range.pThumb.clientWidth/2+"px"
					
					
				},
				get:function() {
					return this.info.currentTime;
				},
				enumerable:true
			};

			EXP.Inherit.prototype.duration = {
				set:function(sec) {
					this.info.duration = isNaN(sec)?0:sec;
					var tstr= ""
					if(sec>=3600){
						tstr = EXP.convertTime(this.info.duration,"h:m:s");
					}else{
						tstr = EXP.convertTime(this.info.duration,"m:s");
					}
					this.wrap.duration.innerHTML=tstr;
				},
				get:function() {
					return this.info.duration;
				},
				enumerable:true
			}
		}),
		////[프로토타입] 로컬스토리지
		(function(mod,EXP,NAME){
			EXP.Inherit.prototype.localStorage = {}
			EXP.Inherit.prototype.localStorage.save = function(name,value){
				EXP.LOCAL_STORAGE.save(this.localKey,name,value);
			};
			EXP.Inherit.prototype.localStorage.load = function(name){
				return EXP.LOCAL_STORAGE.load(this.localKey,name);
			};
			EXP.Inherit.prototype.localStorage.remove = function(name){
				if(name){
					EXP.LOCAL_STORAGE.remove(this.localKey,name);
				}else{
					EXP.LOCAL_STORAGE.removeAll();
				}
			}
		}),
		////[프로토타입] 영상컨트롤 관련
		(function(mod,EXP,NAME){
			var pt = EXP.Inherit.prototype;
			pt.load = function(url){
				var p = this;

				console.log("pt.load :: ", url)
				//return;
				if(!this.isInited){
					setTimeout(function(){
						p.load(url);
					},100)
					return;
				} 
				this.unload();
				this._vodsrc = url;
				if(url.indexOf(".m3u8") !=-1){
					if(EXP.CAN_PLAY_HLS_BASIC){
						this.vod.src = url;
					}else if(EXP.CAN_PLAY_HLS_JS){
						var hls = new Hls();
						hls.loadSource(url);
						hls.attachMedia(this.vod);
						hls.on(Hls.Events.MANIFEST_PARSED,function() {
							hls.off(Hls.Events.ERROR);
						});
						hls.on(Hls.Events.ERROR,function(e,data) {
							hls.destroy();
							throw new Error("HLS 영상 재생 불가");
						});
					}else{
						throw new Error("HLS 영상 재생 불가");
					}
				}else{
					this.vod.src = url;
				}
				
				this.vod.addEventListener(EXP.EVENT.VOD.TIME_UPATE,this.EVENT.CustomEventVOD);
				
			};
			pt.unload = function(){
				this.vod.removeEventListener(EXP.EVENT.VOD.TIME_UPATE,this.EVENT.CustomEventVOD);
				this.vod.src = "";
				this._vodsrc = "";
				this.vod.trigger(EXP.EVENT.VOD.STATUS,"disconnected");
				this.duration = 0;
				this.currentTime = 0;
				
			}
			pt.play = function(sec){
				var p = this;
				if(p.status == "buffering"){
					setTimeout(function(){
						p.play(sec);
					},10);
					return p;
				}
				
				if(sec){
					sec = Math.floor(sec);
					var isError = false;
					var onMeta = function(){
						if(isError) EXP.vod.currentTime = sec;
						p.vod.removeEventListener(EXP.EVENT.VOD.LOAD_DATA,onMeta)
					}
					p.vod.addEventListener(EXP.EVENT.VOD.LOAD_DATA,onMeta);
					try{
						p.vod.currentTime = sec;
					}catch(e){
						isError = true;
					}
				}else{
					if(p.vod.paused){
						var prom = p.vod.play();
						if(prom != undefined){
							prom.then(
								function(){
									p.vod.trigger(EXP.EVENT.VOD.STATUS,"playing");
								},
								function(){
									p.vod.trigger(EXP.EVENT.VOD.STATUS,"paused");
								}
							)
						}else{
							p.vod.trigger(EXP.EVENT.VOD.STATUS,"playing");
						}
					}
				}
				return p;

			}
			pt.pause = function(){
				if(this.status == "buffering") return this;
				if(!this.vod.paused){
					 this.vod.pause();
				};
				return this;
			};
			
			pt.seek = function(sec) {
				this.pause();
				this.vod.currentTime = Math.min(sec,this.duration-0.5);
				return this;
			};

			pt.replay = function(){
				if(this.status == "buffering") return this;
				this.play(0.1);
				return this;
			}
			pt.stop = function(){
				this.seek(0);
				return this;
			}

			pt.toggle =function(){
				if(this.status == "buffering") return this;
				switch(this.status){
					case "playing":
						this.pause();
						break;
					case "disconnected":
						this.play(this.info.currentTime);
						break;
					case "paused": case "seeking": case "seeked":
						this.play();
						break;
					case "finished":
					case "stopped":
						this.play(0.1);
						break;
				}
				return this;
			};
			pt.forward = function(){
				var pre_per =parseFloat(this.range.pCheckBar.getAttribute("data-per"));
				var canSec = this.duration*(100-pre_per)/100,
					jumpSec = Math.min(this.duration,this.currentTime+10);

				if(jumpSec<=canSec){
					this.play(jumpSec-0.5)
				}else{
					this.vod.trigger(EXP.EVENT.MSG.LOCKED,"custom");
				}
			}
			pt.backward = function(){
				this.play(Math.max(0.1,this.currentTime-10));
			}
			var oldVolume = 0;
			pt.mute = function(){
				if(this.volume == 0){
					if(oldVolume == 0) oldVolume = 1;
					this.volume = oldVolume;
					
				}else{
					oldVolume = this.volume;
					this.volume = 0;
					
				}
				return this;
			};

		}),
		////[프로토타입] 상호작용 관련
		(function(mod,EXP,NAME){
			EXP.Inherit.prototype.activity = {
				pause_secs:[],check_secs:[],sendPlayer:{}
			};

			EXP.Inherit.prototype.activity.init = function(data,size){
				var p = this;
				if(!this.isInited){
					setTimeout(function(){
						p.activity.init.call(p.activity,data,size);
					},100);
					return;
				}

				this.activity.pause_secs=[];
				this.activity.check_secs=[];

				if(this.wrap.activity == null) throw new Error(".active_wrap is not defined.");

				var isInited = this.wrap.activity.getAttribute("data-init") == "true";
				this.wrap.activity.innerHTML = "";
				if(!isInited){
					//console.log("p : ", p)
					//1280일 때의 조건을 찾아서 width, height를 1280*720으로 설정
					if(!p.htmlsize.width){
						this.wrap.activity.style.width = "100%";
						this.wrap.activity.style.height = '100%';
					}else{
						this.wrap.activity.style.width = p.htmlsize.width+"px";
						this.wrap.activity.style.height = p.htmlsize.height+'px';
					}

					window.addEventListener("resize",function(e){
						if(!p.htmlsize.width){
							var zoom = p.wrap.main.clientWidth/size.width;
						}else{
							var zoom = p.wrap.main.clientWidth/p.htmlsize.width;
						}
						//console.log(zoom)
						p.wrap.activity.querySelectorAll("iframe.active").forEach(function(v){
							var doc = v.contentWindow.document,
								actMain = doc.querySelector(".main");
							
							/* device 별 크기 조절 통일 수정 2023-04-11*/
							if(actMain && actMain.getAttribute("use-zoom")!="false"){
								/* if(!v.style.width)
									v.style.width = size.width+"px";

								//console.log(size.height , p.wrap.control.clientHeight, p)
								if(!v.style.height)
									v.style.height = size.height-p.wrap.control.clientHeight+"px";
								
								if(!v.style.height){
									v.style.height = p.vod.clientHeight+"px";
								} */

								//////activity resize 수정
								//v.style.width = parseInt(size.width*zoom, 10)+"px";
								//v.style.height = p.vod.clientHeight+"px";
								//console.log("p.htmlsize.width : ", p.htmlsize.width)
								if(!p.htmlsize.width){
									v.style.width = size.width+"px";
									v.style.height = (p.skinType != "default") ? (size.height-71)+"px" : (size.height-40)+"px";
									//console.log(p.skinType , "default")
								}else{
									v.style.width = p.htmlsize.width+"px";
									v.style.height = p.htmlsize.height+'px';
								}
								//console.log("v.style.height : ", v.style.height)

								if(!p.isFullscreen) p.isFullscreen = false;
								
								if(p.isFullscreen){
									v.style.transform = "scale("+zoom+")";
									v.style.MozTransform = "scale("+zoom+")";
									v.style.webkitTransform = "scale("+zoom+")";
									actMain.style.transform = "scale(1)";
									actMain.style.MozTransform = "scale(1)";
									actMain.style.webkitTransform = "scale(1)";
								}else{
									v.style.transform = "scale("+zoom+")";
									v.style.MozTransform = "scale("+zoom+")";
									v.style.webkitTransform = "scale("+zoom+")";
									////// activity resize 수정
									//actMain.style.transform = "scale("+zoom+")";
									//actMain.style.MozTransform = "scale("+zoom+")";
									//actMain.style.webkitTransform = "scale("+zoom+")";
								};
								v.style.transformOrigin = "top left";
								actMain.style.transformOrigin = "top left";
							};
						});

					});
					window.trigger("resize");
					this.wrap.activity.setAttribute("data-init","true");
					this.activity.hide();
				};

				data.forEach(function(v,i){
					if(v.url){
						var ifr = document.createElement("iframe")
						ifr.setAttribute("class","active");
						ifr.setAttribute("id","act_"+i);
						ifr.setAttribute("title","상호작용");
						ifr.onload = function(){
							// quiz, summary, actvity page 모바일 여부 판단을 위한 클래스 추가
							let ifr_content_body = this.contentDocument.body;
							let ifr_content_main = ifr_content_body.querySelector(".main");
							ifr_content_body.classList.add("__setWPlayer");//콘텐츠 구조에 탑재되었는지 확인하는 클래스 추가
							if(ifr_content_main && p.wrap.main.classList.contains("mob")){
								ifr_content_body.classList.add("mob");
							};
							window.trigger("resize");
						}
						ifr.setAttribute("src",v.url);
						p.wrap.activity.appendChild(ifr);
						if(v.style){
							Object.keys(v.style).forEach(function(k){
								ifr.style[k] = v.style[k];
							});
						}

						//등장시간 추출
						var start_time = EXP.convertTime(v.startTime),
							end_time = EXP.convertTime(v.endTime) || EXP.convertTime("99:99:99");
						
						p.activity.check_secs.push({start_time:start_time,end_time:end_time});
					}
					//일시정지 시간 추출
					var psec = EXP.convertTime(v.pauseTime || "00:00");
					if(psec>0) p.activity.pause_secs.push(psec);
					
					p.activity.pause_secs.sort(function(a,b){
						return a-b;
					});
				});
				
				Object.defineProperties(this.activity.sendPlayer,{
					vod:{
						get:function(){
							return p.vod;
						},
						configurable:true
					},
					duration:{
						get:function(){
							return p.duration;
						},
						configurable:true
					},
					currentTime:{
						get:function(){
							return p.currentTime;
						},
						configurable:true
					},
					status:{
						get:function(){
							return p.status;
						},
						configurable:true
					},
					play:{
						value:function(){
						   p.play(arguments[0]);
						},
						configurable:true
					},
					pause:{
						value:function(){
						   p.pause();
						},
						configurable:true
					}
				});
			};

			EXP.Inherit.prototype.activity.hide = function(){
				this.wrap.activity.classList.remove("show");
				var ifrs = this.wrap.activity.querySelectorAll("iframe.active");
				ifrs.forEach(function(v){
					v.classList.remove("show");
				});
			};

			EXP.Inherit.prototype.activity.check = function(){
				var wrap = this.wrap.activity,p=this;
				//정지설정
				if(this.activity.pause_secs.length>0){
					var sec =JSON.parse(JSON.stringify(this.activity.pause_secs)).reverse()[0];
					for(var i = 0;i<this.activity.pause_secs.length-1;++i){
						if(this.currentTime>=this.activity.pause_secs[i] && this.currentTime<this.activity.pause_secs[i+1]){
							sec = this.activity.pause_secs[i];
							break;
						}
					};
					if(wrap.classList.contains("paused")){
						if(this.currentTime<sec || this.currentTime>sec+0.5){
							wrap.classList.remove("paused");
						}
					}else{
						if(this.currentTime>=sec && this.currentTime<=sec+0.5){
							wrap.classList.add("paused");
							this.pause();
						}
					}
				};
				//상호작용설정
				if(this.activity.check_secs.length>0){
					var act_arr = [];
					for(var i = 0;i<this.activity.check_secs.length;++i){
						sec = this.activity.check_secs[i];
						if(this.currentTime>=sec.start_time && this.currentTime<=sec.end_time){
							act_arr.push(i);
						}
					};

					if(act_arr.length>0){
						wrap.classList.add("show");
						var ifrs = wrap.querySelectorAll("iframe.active");
		
						ifrs.forEach(function(v,k){
							if(act_arr.indexOf(k) != -1){
								if(!v.classList.contains("show")){
									v.classList.add("show");
									if(v.contentWindow.KbcActive && v.contentWindow.KbcActive.hasOwnProperty("init")){
										v.contentWindow.KbcActive.init(p.activity.sendPlayer,p.activity.check_secs[k]);
									}
								}
							}else{
								v.classList.remove("show");
							}
						})
					}else{
						this.activity.hide();
					}
				}
			};


		}),
		////[프토토타입] 초기화 완료판단
		(function(mod,EXP,NAME){
			EXP.Inherit.prototype.onCompleted = function(callback){
				if(!this.isInited){
					var p = this;
					setTimeout(function(){
						p.onCompleted.call(p,callback);
					},100)
					return this;
				}
				callback.call(this);
				return this;
			}
		}),
		/*addModule*************************************************************************************/
		(function(mod,EXP,NAME){
			var addModule = function(name,factory){
				if(EXP.MODULES[name]) throw new Error(name+" already defined.");

				EXP.MODULES[name] =factory;

			};
			mod.name="addModule"
			mod.exports = addModule;
		}),
		/*생성자*************************************************************************************/
		(function(mod,EXP,NAME){
			function loadSkin(callback){
				if(this.vod){
					callback.call(this,null);
					return;
				} 

				var p = this;
				//css로딩
				var cssSrc = this.control.skinPath+"kbc.player.css";
				var tag = document.createElement("link"),
				firstTag = document.getElementsByTagName("link")[0];
				tag.rel = "stylesheet";
				tag.type = "text/css";
				tag.href = cssSrc.replace(/^\s/, '').replace(/\s$/, '');
				tag.media ="screen";
				if(firstTag){
					firstTag.parentNode.insertBefore(tag, firstTag);
				}else{
					document.getElementsByTagName('head')[0].appendChild(tag); 
				}
				var img =new Image();
				img.onerror = function(){
					var isLocal = location.href.indexOf("http") == -1;
					var src = (p.control.skinPath+"kbc.player.html").replace(/^\s/, '').replace(/\s$/, '');
					var xobj = null;
					if(isLocal){
						try{
							xobj = new ActiveXObject( "Microsoft.XMLHTTP" )
						}catch(e){
							xobj = new XMLHttpRequest();
						}
					}else{
						xobj = new XMLHttpRequest();
					}
					if(xobj.overrideMimeType) xobj.overrideMimeType('text/html;charset=UTF-8');
					xobj.open('GET', src, true);
					xobj.setRequestHeader("Content-type",'text/html;charset=UTF-8');
					xobj.onreadystatechange = function () {
						if(xobj.readyState == 4){
							if(xobj.status==(isLocal?0:"200")){
								callback.call(p,xobj.responseText)
							}
						}
					};
					xobj.send(null);
				}
				img.src = tag.href+"?"+new Date().getTime();

				return this;
			}

			function setSkin(){
				var p = this;
				this.vod = this.wrap.main.querySelector("video#video");
				var main_wrap = this.wrap.main;
				
				Object.keys(this.buttons).forEach(function(k,i){
					p.buttons[k] = main_wrap.querySelector("button."+k);
				});

				this.range.pwrap = main_wrap.querySelector(".bar_wrap#progress");
				this.range.progress =  main_wrap.querySelector("input.progress-bar");
				this.range.pThumb = main_wrap.querySelector("#progress .thumb");
				this.range.pCheckBar = main_wrap.querySelector("#progress .prog_check_bar");
				this.range.pfill = main_wrap.querySelector("#progress .fill");

				if(this.range.pCheckBar!=null)
					this.range.pCheckBar.setAttribute("data-per",this.isProgCheck?0:100);
				
				this.range.vwrap = main_wrap.querySelector("#volume");
				this.range.volume =  main_wrap.querySelector("input.volume-bar");
				this.range.vThumb = main_wrap.querySelector("#volume .thumb");
				this.range.vfill = main_wrap.querySelector("#volume .fill");

				if(EXP.IS_MOB){
					this.range.vwrap.style.display = "none";
					main_wrap.classList.add("mob");
				}

				this.wrap.control = main_wrap.querySelector(".video-controls")
				//this.wrap.currentTime = main_wrap.querySelector(".time_wrap .currentTime")
				this.wrap.currentTime = main_wrap.querySelector(".currentTime")
				this.wrap.duration = main_wrap.querySelector(".time_wrap .duration")
				this.wrap.activity = main_wrap.querySelector(".active_wrap");
				this.wrap.centerBtns = main_wrap.querySelector(".nav_btns_wrap") || null;
				this.wrap.bufferBar = main_wrap.querySelector(".buffer");
				this.wrap.pstatus = main_wrap.querySelector('.pstatus');

				this.wrap.main.querySelector(".pre_wrap").style.display = "none";
				
			}

			function setEvents(){
				var seekTime=0,checkBuffer_inv=null,p = this;
				p.vod.CLASS_ID = p.ID;
				//이벤트 설정
				Object.keys(EXP.EVENT.VOD).forEach(function(ka){
					p.vod.addEventListener(EXP.EVENT.VOD[ka],p.EVENT.CustomEventVOD);
				});

				Object.keys(EXP.EVENT.MSG).forEach(function(ka){
					p.vod.addEventListener(EXP.EVENT.MSG[ka],p.EVENT.CustomEventMSG);
				});
				//컨트롤러 감추기
				p.wrap.main.addEventListener("mousemove",function(e){
					if(p.wrap.control.classList.contains("show")) return;
					p.control.show();
				})
				p.wrap.main.addEventListener((EXP.IS_MOB)?"touchstart":"mouseover",function(e){
					if(p.wrap.control.classList.contains("show")) return;
					p.control.show();
				});

				p.wrap.main.addEventListener((EXP.IS_MOB)?"touchend":"mouseout",function(event){
					var e = event.toElement || event.relatedTarget;
					if(e == event.target) return;
					if(p.wrap.main.contains(e)) return;
					p.control.hide();
				
				});
				//버튼 설정
				var setButton = function(btn,event,fn){
					if(btn == null)return;
					btn.addEventListener(event,function(){
						fn.call(p);
					});
				}
				setButton(p.buttons.play,"click",p.toggle);
				setButton(p.buttons.pause,"click",p.toggle);
				setButton(p.buttons.replay,"click",p.replay);
				setButton(p.buttons.forward,"click",p.forward);
				setButton(p.buttons.backward,"click",p.backward);
				setButton(p.buttons.volume,"click",p.mute);
				//진행바 설정
				p.range.progress.addEventListener((EXP.IS_MOB)?"touchstart":"mousedown",function(e) {
					p.isSeeking = true;
					if(EXP.IS_MOB){
						var val = (e.target.max*Math.max(0,e.touches[0].clientX)/e.target.clientWidth);
						e.target.value = val;
						e.target.trigger("input");
					}
				});

				p.range.progress.addEventListener((EXP.IS_MOB)?"touchend":"mouseup",function(){
					p.isSeeking = false;
					p.seek(seekTime);
					checkBuffer_inv = setTimeout(function(){
						if(p.status == "seeking" || p.status=="buffering"){
							p.vod.trigger(EXP.EVENT.VOD.STATUS,"buffering");
						}
						clearTimeout(checkBuffer_inv);
						checkBuffer_inv=null;
					},1000)
				});

				p.range.progress.addEventListener("input",function(e) {

					var per = parseFloat(e.target.value)/parseFloat(p.range.progress.max);
					var sec = 0;
					var per_per = parseFloat(p.range.pCheckBar.getAttribute("data-per"));
					if(per*100<(100-per_per)){
						sec = p.duration *per;
					}else{
						sec = p.vod.currentTime;
						if(!p.isProgCheck){
							p.vod.trigger(EXP.EVENT.MSG.LOCKED,"custom");
						}else{
							if(per==1) sec = p.duration;
						}
					}
					if(Math.floor(sec) != Math.floor(p.currentTime)){
						p.seek(sec);
					}
					p.currentTime = seekTime = sec;
					p.activity.check();
				});

				p.range.progress.addEventListener("change",function(e) {
					e.target.trigger("input");
				});				
				//볼륨 바 설정
				p.range.volume.addEventListener("input",function(e){
					var v = parseFloat(e.target.value)/parseFloat(p.range.volume.max)
					p.volume = v;
				});

				p.range.volume.addEventListener("change",function(e){
					e.target.trigger("input");
				});

				if(p.range.vwrap.getAttribute("data-show") =="use" && p.buttons.volume){
					var vout = function(e){
						var event =  e.toElement || e.relatedTarget;
						if(event == null || (event.parentNode != p.range.vwrap && event!=p.range.vwrap)){				
							p.range.vwrap.classList.remove("show");
							p.range.vwrap.removeEventListener("mouseout",vout)
						}
					}
					p.buttons.volume.parentNode.addEventListener("mouseover",function(e){
						p.range.vwrap.classList.add("show");
						p.range.vwrap.removeEventListener("mouseout",vout)
						p.range.vwrap.addEventListener("mouseout",vout)
					});

					p.buttons.volume.parentNode.addEventListener("mouseout",function(e){
						var event = e.toElement || e.relatedTarget;
						if(event==null || (event!=p.buttons.volume.parentNode && event!= p.range.vwrap)){
							p.range.vwrap.classList.remove("show");
							p.range.vwrap.removeEventListener("mouseout",vout)
						}
					});
				};

				p.vod.addEventListener("keydown",function(e){
					if(p.control.useKey)
						e.preventDefault();
				});

				window.addEventListener("resize",function(e){
					p.currentTime = p.info.currentTime;
					p.volume = p.info.volume;
				});

				window.addEventListener("keyup",function(e){

					if(p.control.useKey){
						if(p.wrap.main.querySelector(".pre_wrap").style.display == "") return;
						switch(e.keyCode){
							//토글
							case 32:
								p.toggle();
								break;
							//볼륨
							case 38:
								p.volume+=0.2;
								break;
							case 40:
								p.volume-=0.2;
								break;
							//10초 뒤로
							case 37:
								if(p.buttons.backward!=null)
									p.buttons.backward.trigger("click");
								break;
							//10초 앞으로
							case 39:
								
								if(p.buttons.forward!=null)
									p.buttons.forward.trigger("click");
								break;
						}
						e.preventDefault();
					}
				});

				//추가 기능 클릭시 토글
				p.vod.addEventListener("click",function(e){
					if(!p._init_option["스킨타입"].type) return;
					e.preventDefault();
					if(p.status == "playing"){
						p.wrap.pstatus.classList.add('pstatus__icon--pause')
					}else{
						p.wrap.pstatus.classList.add('pstatus__icon--play')
					}
					setTimeout(function(){
						p.wrap.pstatus.classList.remove('pstatus__icon--pause')
						p.wrap.pstatus.classList.remove('pstatus__icon--play')
					},600)

					p.toggle();
				})

				if(p._init_option["사용모듈"].indexOf('fullscreen')!=-1){
					p.vod.addEventListener('dblclick',function(e){
						e.preventDefault();
						p.fullscreen();
					});
				}
				
			}

			function PlayerInit(opt){
				function KbcNewPlayer(opt){
					var p = this;
					opt = opt || {};
					//속성 상속
					var init_prop = {
						ID:NAME+"_"+Object.keys(EXP.PLAYER_LIST).length+"_"+new Date().getTime(),
						prog_per:opt["강제진도율"] || 0,
						isProgCheck:(opt["진도완료여부"] == undefined)?true:opt["진도완료여부"],
						info:{volume:(opt["초기볼륨"] == undefined)?1:opt["초기볼륨"]},
						msg:opt["메세지함수"] || function(){},
						useModules:opt["사용모듈"] || [],
						autoplay:opt["자동재생"] || false,
						localKey:opt["로컬키"] ||"",
						jumpTime:opt["시작시간"] ||"",
						lmsType:opt["탑재사이트"] ||"",//국립통일교육원 추가하면서 삽입
						skinType:opt["스킨타입"] ||"",//버전업 하면서 추가
						htmlsize:opt["HTML사이즈"] ||"",//버전업 하면서 추가
					}
					//속성 설정
					EXP.Clone.property(EXP.Inherit.property,this,init_prop)

					EXP.PLAYER_LIST[this.ID] = this;
					this.lmsType = opt["탑재사이트"] ||""//국립통일교육원 추가하면서 삽입
					this.skinType = opt["스킨타입"] ||""//버전업 하면서 추가
					this.htmlsize = opt["HTML사이즈"] ||""//버전업 하면서 추가
					this.control.skinPath =EXP.SKIN_PATH+((opt["스킨경로"] || "default")+"/");
					this.control.useShowHide = (opt["컨트롤러숨김기능"] == undefined)?false:opt["컨트롤러숨김기능"];
					this.control.useKey = (opt["키보드컨트롤기능"] == undefined)?true:opt["키보드컨트롤기능"];
					this.control.delay = (opt["컨트롤러숨김시간"] == undefined)?3000:opt["컨트롤러숨김시간"];
					this.control.useControl = (opt["컨트롤러사용"] == undefined)?true:opt["컨트롤러사용"];
					//컨테이너 설정/
					this.wrap.main =(opt["비디오컨테이너"])?document.body.querySelector(opt["비디오컨테이너"]):document.body.querySelector(".video-container");
					if(this.wrap.main == null){
						var d = document.createElement("div");
						d.classList.add("video-container");
						document.body.appendChild(d);
						this.wrap.main = document.querySelector(".video-container");
					}
					this.wrap.main.setAttribute("id",this.ID);
					this.vod = this.wrap.main.querySelector("video#video");
					this._vodsrc = opt["영상경로"] || "";
					this._init_option = {
						"강제진도율": this.prog_per,
						"진도완료여부": this.isProgCheck,
						"초기볼륨":this.info.volume,
						"메세지함수":this.msg,
						"비디오컨테이너":"."+this.wrap.main.getAttribute("class"),
						"컨트롤러숨김기능":this.control.useShowHide,
						"컨트롤러사용":this.control.useControl,
						"컨트롤러숨김시간":this.control.delay,
						"키보드컨트롤기능":this.control.useKey,
						"스킨경로":this.control.skinPath,
						"영상경로":this._vodsrc,
						"사용모듈":this.useModules,
						"로컬키":this.localKey
					};
					
					//사용자 별도 옵션 추가
					Object.keys(opt).forEach(function(k,v){
						if(p._init_option[k] == undefined){
							p._init_option[k] = opt[k];
						}
					});

					loadSkin.call(this,function(skin){
						var p = this;
						if(skin) p.wrap.main.innerHTML =skin;
						
						setSkin.call(this);
						setEvents.call(this);
						
						//모듈 설정
						Object.keys(EXP.MODULES).forEach(function(keyA){
							if(p.useModules.indexOf(keyA) !=-1){
								var now_mod = EXP.MODULES[keyA];

								if(now_mod.hasOwnProperty("ClassProperty"))
									EXP.Clone.property(now_mod.ClassProperty,p,{},{
										configurable:false,writable:true,enumerable:true
									});

								if(now_mod.hasOwnProperty("ClassPrototype"))
									EXP.Clone.prototype(now_mod.ClassPrototype,KbcNewPlayer.prototype);
							}else{
								if(EXP.MODULES[keyA].hasOwnProperty("dispose"))
									EXP.MODULES[keyA].dispose.call(p);
							}
						});

						//오브젝트형 프로토타입에 클래스 ID 부여
						Object.keys(KbcNewPlayer.prototype).forEach(function(keyB){
							if(typeof p[keyB] === "object" && !p[keyB].hasOwnProperty("CLASS_ID"))
								p[keyB].CLASS_ID = p.ID;
						});

						p.useModules.forEach(function(ka){
							var now_mod = EXP.MODULES[ka];
							if(now_mod.hasOwnProperty("init")){
								try{
									now_mod.init.call(p)
								}catch(e){
									console.log(e);
								}
							}else{
								throw new Error("module [" +keyA+"] has not 'init' function.")
							}
						})
						
						var localVol = parseFloat(p.localStorage.load("volume"));
						this.volume = isNaN(localVol)?p.info.volume:localVol;
						if(p._vodsrc)p.load(p._vodsrc);
						p.isInited = true;
						window.trigger("resize")
						
					});
					
					return this;
				};

				//프로토 타입 복제////////////////////////////////////////////////
				EXP.Clone.prototype(EXP.Inherit.prototype,KbcNewPlayer.prototype)

				return new KbcNewPlayer(opt);
			}
			mod.name = "PlayerInit";
			mod.exports = PlayerInit;
		}),

	])
}));

//kbc.player.caption//////////////////////////////////////////////////////////////////////////////////
;(function(root,name,factory){
	if(root[name]){
		root[name].addModule("caption",factory(root[name]));
	}else{
		throw new Error(name+" isn't defined.")
	}
}(window,"KbcPlayer",function(m_exports){
	return(function(modules){
		var exports = {};
		modules.forEach(function(m){
			var module = {name:"",exports:{}};
			m.call(module.exports,module,exports,m_exports);
			if(module.name)exports[module.name] = module.exports;
		});
		 
		return exports;
	})([
		(function(module,exports,m_exports){
			var init = function(){
				var p = this;
				this.buttons.caption = this.wrap.main.querySelector("button.caption");
				if(!this.buttons.caption) return this;
				
				this.wrap.caption = this.wrap.main.querySelector(".caption_wrap");
				this.wrap.captionTxt = this.wrap.caption.querySelector(".caption_text");

				//multi-lang 자막 관련 기능 수정 시작
				this.wrap.captionBtnWrap = this.wrap.main.querySelector("#caption_btn");
				if(!this.wrap.main.classList.contains("mob")){
					this.wrap.captionBtnWrap.addEventListener("mouseover", function(e){
						if(this.dataset.type == "multi-lang" && !this.classList.contains("on")){
							p.caption.selector();
						}
					});
					this.wrap.captionBtnWrap.addEventListener("mouseout", function(e){
						if(this.dataset.type == "multi-lang" && this.classList.contains("on")){
							p.caption.selector();
						}
					});
				}
				this.buttons.caption.addEventListener("click",function(){
					if(this.parentNode.getAttribute("data-type") == "multi-lang"){
						p.caption.selector();
					}else{
						p.caption.toggle();
					}
				});
				//multi-lang 자막 관련 기능 수정 종료

				if(this._init_option["자막경로"])
					this.caption.set(this._init_option["자막경로"]);
				
				
				return this;
			}
			module.name = "init";
			module.exports =init
		}),
		(function(module,exports,m_exports){
			function dispose(){
				var btn = this.wrap.main.querySelector("button.caption");
				if(btn)	
					btn.parentNode.parentNode.removeChild(btn.parentNode);
				
				var wrap =  this.wrap.main.querySelector(".caption_wrap");
				
				if(wrap)
					wrap.parentNode.removeChild(wrap);
				
				
				return this;
			}

			module.name = "dispose";
			module.exports =dispose
		}),
		(function(module,exports,m_exports){

			var loadCaptions= function(paths){
				var isLocal = location.href.indexOf("http") == -1;
				var proms = [];
				
				paths.forEach(function(data){
					var prom  =new Promise(function(resolve,reject){
						var xobj = null;
						if(isLocal){
							try{
								xobj = new ActiveXObject( "Microsoft.XMLHTTP" );
							}catch(e){
								xobj = new XMLHttpRequest();
							}
						}else{
							xobj = new XMLHttpRequest();
						};
						if(xobj.overrideMimeType) xobj.overrideMimeType('text/html;charset=UTF-8');
						xobj.open('GET', data.url, true);
						xobj.setRequestHeader("Content-type",'text/html;charset=UTF-8');
						xobj.onreadystatechange = function () {
							if(xobj.readyState == 4){
								
								if(xobj.status==(isLocal?0:"200")){
									data.caption = xobj.responseText;
									resolve(data);
								}else{
									reject(data.url+" loading error");
								}
							}
						}
						xobj.send(null);
					});
					proms.push(prom);
				})

				return proms;
			}

			var parseVtt = function(data){
				var lines = data.split("\n")
				var tObj = {};
				var cap_data = [];
				lines.forEach(function(v,k){
					if(v.indexOf("-->")!=-1){
						if(tObj.st!= undefined) cap_data.push(tObj);
						var times = v.split("-->");
						tObj ={}
						tObj.st = m_exports.convertTime(times[0])
						tObj.et = m_exports.convertTime(times[1])
						tObj.script = "";
					}else{
						var temp_val = v.trim().replace(/\n/g, "").replace(/\r/g, "").replace(/\t/g, "").split(" ").join("");

						var num_reg= new RegExp("^[0-9]+$","g");
						if(tObj.st != undefined && temp_val && temp_val.match(num_reg) == null){
							tObj.script += v.trim();
							if(m_exports.IS_MOB){
								tObj.script += " ";
							}else{
								tObj.script += "<br>";
							}
						}
					}
					if(k == lines.length-1)cap_data.push(tObj);
				});

				return cap_data;
			};

			var parseSrt = function(data){
				//const reg = /(^\d{1,})\s{1,}(\d{1,}:)/gm;
				//var st = data.replace(reg, "$2")
				//console.log(reg.exec(data))
				var returnData = [];
				var splitObj = {}
				var cap_data = [];
				var charset = "_arr";
				const reg = /(^\d{1,})\s{1,}/gm;
				var st = data.replace(reg, charset);//.replace(/\n/gm, "");
				cap_data = st.split(charset).slice(1);
				cap_data.forEach(function(val){
					splitObj = {};
					var st_split = val.replace(/\r\n|\n/, "#split");
					var start_time = st_split.split("#split")[0].split("-->")[0].replace(",", ".").trim();
					var end_time = st_split.split("#split")[0].split("-->")[1].replace(",", ".").trim();

					splitObj.st = m_exports.convertTime(start_time);
					splitObj.et = m_exports.convertTime(end_time);
					splitObj.script = st_split.split("#split")[1].trim();

					returnData.push(splitObj)					
				});

				return returnData;
			};

			var caption_update = function(){
				var p = this;
				var isInTime = false;
				if(!p._caption_data) return;

				p._caption_data.some(function(ka){
					if(p.currentTime>=ka.st && p.currentTime<ka.et){
						if(p._caption_wrap.innerHTML!= ka.script)
							p._caption_wrap.innerHTML = ka.script;
						isInTime = true;
						return true;
					}
				});

				if(isInTime){
					
					if(p._caption_wrap.innerHTML==""){
						p._caption_wrap.style.display="none"
					}else{
						p._caption_wrap.style.display=""
					}
				}else{
					p._caption_wrap.innerHTML= "";
					p._caption_wrap.style.display="none"
				}
			}

			var not_support = function(){
				this.caption.data = {};
				this.wrap.captionTxt.innerHTML = "";
				this.buttons.caption.parentNode.style.display = "none";
				this.wrap.control.classList.remove('video-controls--caption-show')//추가
				this.wrap.caption.classList.remove("on");//추가
				this.wrap.caption.style.display = "none";
				this.vod._caption_wrap = null;
				this.vod._caption_data = null;
				this.vod.removeEventListener(m_exports.EVENT.VOD.TIME_UPATE,caption_update);
			};

			var support = function(urls){
				var p =this;
				this.buttons.caption.parentNode.style.display = "";
				var p_wrap = this.buttons.caption.parentNode

				if(p_wrap.querySelector(".cap_sel_wrap")){
					//p_wrap.innerHTML = "";
					p_wrap.removeChild(p_wrap.querySelector(".cap_sel_wrap"));//다언어 자막 버튼 기능 오류 수정
				}
				if(urls.length>1){
					p_wrap.setAttribute("data-type","multi-lang");

					var cap_wrap = document.createElement("div");
					cap_wrap.classList.add("cap_sel_wrap");
					p_wrap.appendChild(cap_wrap);

					var no_script_btn = document.createElement("button");
					no_script_btn.classList.add("cap_btns")
					no_script_btn.setAttribute("data-type","no_script")
					no_script_btn.setAttribute("tabIndex", 0);
					no_script_btn.innerHTML = "자막 끄기";
					//no_script_btn.style.display = "none"
					cap_wrap.appendChild(no_script_btn);

					no_script_btn.addEventListener("click",function(){
						p.caption.selector();
						p.caption.setLangType(this.getAttribute("data-type"));						
					}); 

					urls.forEach(function(ka){
						var btn = document.createElement("button");
						btn.classList.add("cap_btns")
						btn.setAttribute("tabIndex", 0);
						btn.setAttribute("data-type",ka.type)
						btn.innerHTML = ka.name;
						cap_wrap.insertBefore(btn,no_script_btn);
						
						btn.addEventListener("click",function(){
							p.caption.selector();
							p.caption.setLangType(this.getAttribute("data-type"));
						});
						
					});

				}else{
					this.caption.type = "ko"
				}
				this.wrap.caption.style.display = "";
				this.vod._caption_wrap = this.wrap.captionTxt;
				this.vod._caption_data = this.caption.data[this.caption.type]
				
				this.vod.addEventListener(m_exports.EVENT.VOD.TIME_UPATE,caption_update);
			}

			var ClassPrototype = {
				caption:{
					data:{},
					type:"no_script"
				}
			}

			ClassPrototype.caption.set = function(urls){
				var p =this;
				not_support.call(p);
				if(!urls) return p;

				var cap_urls = [];	
				if(typeof urls == "string"){
					cap_urls.push({url:urls,name:"한국어",type:"ko"});
				}else{
					cap_urls = urls;
				};
				
				Promise.all(loadCaptions(cap_urls)).then(function(datas){
					datas.forEach(function(data){
						var langetype = data.url.split("/").reverse()[0].split(".").reverse()[0];
						switch(langetype){
							case "txt": 
								p.caption.data[data.type || "ko"] = (p.lmsType == "uniedu") ? parseSrt(data.caption) : parseVtt(data.caption);	
							break;
							case "vtt":
								p.caption.data[data.type || "ko"] = parseVtt(data.caption);	
							break;
							case "srt":
								p.caption.data[data.type || "ko"] = parseSrt(data.caption);	
							break
						}
					});
					
					support.call(p,cap_urls);
					
					if(p.localStorage.load("isCaptionView") == "true")
						p.caption.show();

					if(cap_urls.length>1){
						p.caption.setLangType(p.localStorage.load("captionType") || "no_script");
					}
					
				},function(err){
					console.warn(err);
				});
				
			}

			ClassPrototype.caption.get = function(){
				return this.caption.data;
			}

			ClassPrototype.caption.hide = function(){
				this.buttons.caption.classList.remove("on");
				this.wrap.caption.classList.remove("on");
				this.wrap.control.classList.remove('video-controls--caption-show')//추가
				this.localStorage.save("isCaptionView","false")
				return this;
			}

			ClassPrototype.caption.show = function(){
				this.buttons.caption.classList.add("on");
				this.wrap.caption.classList.add("on");
				this.wrap.control.classList.add('video-controls--caption-show')//추가
				this.localStorage.save("isCaptionView","true");
				return this;
			}

			ClassPrototype.caption.toggle = function(){
				if(this.buttons.caption.classList.contains("on")){
					this.caption.hide()
				}else{
					this.caption.show()
				}
				return this;
			}

			ClassPrototype.caption.selector = function(){
				var p_wrap = this.buttons.caption.parentNode;
				if(p_wrap.classList.contains("on")){
					p_wrap.classList.remove("on");
				}else{
					//multi-lang 자막 관련 기능 수정 시작
					p_wrap.classList.add("on");
					var btns = p_wrap.querySelectorAll(".cap_btns");
					if(this.wrap.caption.classList.contains("on")){
						btns[btns.length-1].style.display = "";
					}else{
						btns[btns.length-1].style.display = "none";
					};
					//multi-lang 자막 관련 기능 수정 종료
				}
			}

			ClassPrototype.caption.setLangType = function(type){
				var p = this;
				var p_wrap = this.buttons.caption.parentNode;
				p_wrap.querySelectorAll(".cap_btns").forEach(function(btn){
					if(btn.getAttribute("data-type") == type){
						btn.classList.add("on")
						p.buttons.caption.innerHTML = (btn.innerHTML == "자막 끄기") ? "자막" : btn.innerHTML;
						p.vod._caption_data = p.caption.data[type];
						
						if(type == "no_script"){
							p.caption.hide()
						}else{
							p.caption.show();
						};

						p.localStorage.save("captionType",type);
						
					}else{
						btn.classList.remove("on")
					}
				})
			}

			module.name = "ClassPrototype";
			module.exports = ClassPrototype;
		})
	]);
}));

//kbc.player.conlock//////////////////////////////////////////////////////////////////////////////////
;(function(root,name,factory){
	if(root[name]){
		root[name].addModule("conlock",factory(root[name]));
	}else{
		throw new Error(name+" isn't defined.")
	}
}(window,"KbcPlayer",function(m_exports){
	return(function(modules){
		var exports = {};
		modules.forEach(function(m){
			var module = {name:"",exports:{}};
			m.call(module.exports,module,exports,m_exports);
			if(module.name)exports[module.name] = module.exports;
		});
		return exports;
	})([
		(function(module,exports,m_exports){
			var init = function(){
				var p = this;
				this.buttons.conlock = this.wrap.main.querySelector("button.conlock");

				if(!this.buttons.conlock) return this;
				
				if(!this.control.useShowHide){
					this.buttons.conlock.parentNode.style.display="none";
					return this;
				}

				this.buttons.conlock.addEventListener("click",function(){
					p.isConLock = !p.isConLock;
					p.localStorage.save("isConLock",p.isConLock.toString());

					if(p.isConLock){
						this.classList.add("on");
						this.setAttribute("title","컨트롤러 풀림")
						
					}else{
						this.classList.remove("on")
						this.setAttribute("title","컨트롤러 잠금")
					}
				});
				if(this.isConLock != (this.localStorage.load("isConLock") == "true"))
					this.buttons.conlock.trigger("click");
				

				return this;
			}
			module.name = "init";
			module.exports =init
		}),
		(function(module,exports,m_exports){
			function dispose(){
				var btn = this.wrap.main.querySelector("button.conlock");
				if(btn)	
					btn.parentNode.parentNode.removeChild(btn.parentNode);
				
				return this;
			}

			module.name = "dispose";
			module.exports =dispose
		}),
		(function(module,exports,m_exports){
			var ClassPrototype = {
				control:{}
			};

			var t_inv = null;
			ClassPrototype.control.hide = function(){
				if(!this.control.useShowHide) return this;
				var p = this;
				if(t_inv) clearTimeout(t_inv);
				if(this.isConLock) return this;
				
				t_inv = setTimeout(function(){
					if(p.status !="finished" && !p.isConLock){
						p.wrap.control.classList.remove("show");
						if(p.wrap.centerBtns) p.wrap.centerBtns.classList.remove("show");
					}
				},p.control.delay);
				return this;
			}
			module.name = "ClassPrototype";
			module.exports = ClassPrototype;
		}),
		(function(module,exports,m_exports){
			var ClassProperty ={
				isConLock:{
					value:false,
					writable:true,
					enumerable:true,
					configurable:false
				}
			};
			module.name = "ClassProperty";
			module.exports = ClassProperty;
		})
	]);
}));

//kbc.player.fullscreen//////////////////////////////////////////////////////////////////////////////////
;(function(root,name,factory){
	if(root[name]){
		root[name].addModule("fullscreen",factory(root[name]));
	}else{
		throw new Error(name+" isn't defined.")
	}
}(window,"KbcPlayer",function(m_exports){
	return(function(modules){
		var exports = {};
		modules.forEach(function(m){
			var module = {name:"",exports:{}};
			m.call(module.exports,module,exports,m_exports);
			if(module.name)exports[module.name] = module.exports;
		});
		 
		return exports;
	})([
		(function(module,exports,m_exports){

			var events = [
				"fullscreenchange",
				"mozfullscreenchange",
				"webkitfullscreenchange",
				"MSFullscreenChange"
			];

			function fullscreenchange(){
				var p = this;
				this.buttons.normalscreen.style.display = "none";
				this.buttons.fullscreen.style.display = "none";
				if(exports.fullscreen()){
					
					this.wrap.main.classList.add("fullscreen")
					this.buttons.normalscreen.style.display = ""
				}else{
					
					this.wrap.main.classList.remove("fullscreen")
					this.buttons.fullscreen.style.display = "";
				}
			}

			var init = function(){
				var p = this;
				this.buttons.fullscreen = this.wrap.main.querySelector("button.fullscreen");
				this.buttons.normalscreen = this.wrap.main.querySelector("button.normalscreen");

				if(!this.buttons.normalscreen || !this.buttons.fullscreen) return this;
					
				this.buttons.normalscreen.style.display = "none";

				this.buttons.fullscreen.addEventListener("click",function(){					
					p.isFullscreen = true;
					p.fullscreen();					
				});
				this.buttons.normalscreen.addEventListener("click",function(){
					p.isFullscreen = false;
					p.fullscreen();					
				});


				if(exports.IS_SUPPORT){
					this.buttons.fullscreen.parentNode.style.display=""
					events.forEach(function(v){
						document.addEventListener(v,function(){
							fullscreenchange.call(p)
						})
					});
				}else{
					this.buttons.fullscreen.parentNode.style.display="none"
				}
				return this;

			}
			module.name = "init";
			module.exports =init
		}),
		(function(module,exports,m_exports){
			function dispose(){
				var btn = this.wrap.main.querySelector("button.fullscreen");
				if(btn)	
					btn.parentNode.parentNode.removeChild(btn.parentNode);
				
				return this;
			}

			module.name = "dispose";
			module.exports =dispose
		}),
		(function(module,exports){
			var checkFullscreenSupport = function(){
				if(
					document.fullscreenEnabled||
					document.msFullscreenEnabled||
					document.webkitFullscreenEnabled||
					document.mozFullscreenEnabled
				)return true;
				return false;
			};
			module.name = "IS_SUPPORT";
			module.exports =checkFullscreenSupport();
		}),
		(function(module,exports){
			var fullscreen = function(elem){
				
				if(!elem){
					if(document.fullscreenElement || document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.msFullscreenElement){
						return true;
					}
					return false;
				}

				if(this.fullscreen()){
					if (document.exitFullscreen) {
						document.exitFullscreen();
					} else if (document.mozCancelFullScreen) {
						document.mozCancelFullScreen();
					} else if (document.webkitExitFullscreen) {
						document.webkitExitFullscreen();
					} else if (document.msExitFullscreen) {
						document.msExitFullscreen();
					}
				}else{
					if (elem.requestFullscreen) {
						elem.requestFullscreen();
					} else if (elem.mozRequestFullScreen) {
						elem.mozRequestFullScreen();
					} else if (elem.webkitRequestFullscreen) {
						elem.webkitRequestFullscreen();
					} else if (elem.msRequestFullscreen) {
						elem.msRequestFullscreen();
					}
				}
			}

			module.name = "fullscreen";
			module.exports =fullscreen
		}),
		(function(module,exports,m_exports){
			var ClassPrototype = {}
			ClassPrototype.fullscreen = function(elem){
				exports.fullscreen(elem || this.wrap.main);
			};
			module.name = "ClassPrototype";
			module.exports = ClassPrototype;
		})
	]);
}));

//kbc.player.time_b//////////////////////////////////////////////////////////////////////////////////
;(function(root,name,factory){
	if(root[name]){
		root[name].addModule("time_b",factory(root[name]));
	}else{
		throw new Error(name+" isn't defined.")
	}
}(window,"KbcPlayer",function(m_exports){
	return(function(modules){
		var exports = {};
		modules.forEach(function(m){
			var module = {name:"",exports:{}};
			m.call(module.exports,module,exports,m_exports);
			if(module.name)exports[module.name] = module.exports;
		});
		return exports;
	})([
		(function(module,exports,m_exports){
			var init = function(){
				var p = this;

				p.wrap.timeb = p.wrap.control.querySelector(".bar_wrap#progress .time_b")
				if(!p.wrap.timeb){
					p.wrap.timeb =  document.createElement("div");
					p.wrap.timeb.classList.add("time_b");
					p.wrap.control.querySelector(".bar_wrap#progress").appendChild(p.wrap.timeb);
				}
				
				if(m_exports.IS_MOB){
					exports.dispose.call(this);
					return this;
				}

				this.range.pwrap.addEventListener("mousemove",function(e){
					if(e.target.parentNode != p.range.pwrap){
						p.wrap.timeb.classList.remove("on")
					}else{

						var timeRect = p.wrap.timeb.getBoundingClientRect();
						var pBarRect = p.range.pThumb.parentNode.getBoundingClientRect();
						
						var gabMin = Math.max(0,timeRect.width/2-pBarRect.left+2)/pBarRect.width
						var gabMax = (pBarRect.right-timeRect.width/2-2)/pBarRect.width;

						var per =Math.min(gabMax,e.offsetX/p.range.pwrap.clientWidth);
						per = Math.max(per,gabMin)
						p.wrap.timeb.style.left = 100*per+"%";

						var time = m_exports.convertTime(p.duration*per,"m:s")
						p.wrap.timeb.innerHTML = time;
						p.wrap.timeb.classList.add("on")
					}
				});
				this.range.pwrap.addEventListener("mouseout",function(event){
					var e = event.toElement || event.relatedTarget;
					if(e == event.target) return;
					if(p.range.pwrap.contains(e)) return;

					p.wrap.timeb.classList.remove("on")
				});

				return this;
			};


			module.name = "init";
			module.exports =init
		}),
		(function(module,exports,m_exports){
			function dispose(){
				var wrap =  this.wrap.main.querySelector("div.time_b");
				if(wrap)	
					wrap.parentNode.removeChild(wrap);
				
				return this;
			}

			module.name = "dispose";
			module.exports =dispose
		}),
	]);
}));

//kbc.player.time_anchor//////////////////////////////////////////////////////////////////////////////////
;(function(root, name, factory){
	if(root[name]){
		root[name].addModule("time_anchor", factory(root[name]));
	}else{
		throw new Error(name+" isn't defined.");
	}
}(window, "KbcPlayer", function(m_exports){
	return (function(modules){
		var exports = {};
		modules.forEach(function(m){
			var module = {name:"", exports:{}};
			m.call(modules.exports, module, exports, m_exports);
			if(module.name) exports[module.name] = module.exports;
		});

		return exports;
	}([

		(function(module, exports, m_exports){
			var init = function(){
				var p = this;
				p.wrap.anchor = p.wrap.control.querySelector(".bar_wrap#progress .anchor_wrap")
				if(!p.wrap.anchor){
					p.wrap.anchor =  document.createElement("div");
					p.wrap.anchor.classList.add("anchor_wrap");
					p.wrap.control.querySelector(".bar_wrap#progress").appendChild(p.wrap.anchor);
				}

				window.addEventListener("resize",function(){
					p.wrap.anchor.style.width = p.range.pThumb.parentNode.style.width;
				});

				
			};

			module.name = "init";
			module.exports = init;
		}),
		(function(module, exports, m_exports){
			var ClassPrototype = {
				anchor:{data:[]},
			};

			ClassPrototype.anchor.set = function(data){
				var p = this;
				if(p.duration == undefined || p.duration<=0){
					setTimeout(function(){
						p.anchor.set.call(p.anchor,data);
					},100)
					return this;
				};
				
				this.anchor.reset();
				this.anchor.data = data;
				
				this.anchor.data.forEach(function(ka){
					p.anchor.add(ka.name,ka.time)
				});

				if(this.anchor.data.length){
					p.wrap.anchor.style.height="45%"
				}else{
					p.wrap.anchor.style.height="0%"
				}
				window.trigger("resize");
				return this;
			};

			ClassPrototype.anchor.get = function(){
				return this.anchor.data;
			};

			ClassPrototype.anchor.reset = function(){
				this.anchor.data = [];
				this.wrap.anchor.innerHTML = "";
				return this;
			};

			ClassPrototype.anchor.add = function(name,time){
				//앵커 및 풍선 생성
				time = m_exports.convertTime(time);
				var p = this;
				var anchor_tag = document.createElement("div");
				anchor_tag.classList.add("anchor");

				var bubble_tag = document.createElement("div");
				bubble_tag.classList.add("bubble");
				bubble_tag.innerHTML = name;
				anchor_tag.appendChild(bubble_tag);

				anchor_tag.setAttribute("set_time", time);
				p.wrap.anchor.appendChild(anchor_tag);
				
				anchor_tag.style.left = 100*time/p.duration+"%";
				anchor_tag.setAttribute("data-per", 100*time/p.duration);

				anchor_tag.addEventListener("click",function(e){
					var per_per = parseFloat(p.range.pCheckBar.getAttribute("data-per"));

					if(100 > parseFloat(this.getAttribute("data-per")) + per_per){//진도bar 이내 범위이면...
						p.seek(this.getAttribute("set_time"));
					}else{
						if(!p.isProgCheck)						
							p.vod.trigger(m_exports.EVENT.MSG.LOCKED,"custom");
					}
				})
			}

			module.name = "ClassPrototype";
			module.exports = ClassPrototype;
		})

	]));
}));

//kbc.player.rate//////////////////////////////////////////////////////////////////////////////////
;(function(root, name, factory){
	if(root[name]){
		root[name].addModule("rate", factory(root[name]));
	}else{
		throw new Error(name+" isn't defined.");
	}
}(window, "KbcPlayer", function(m_exports){
	return (function(modules){
		var exports = {};
		modules.forEach(function(m){
			var module = {name:"", exports:{}};
			m.call(modules.exports, module, exports, m_exports);
			if(module.name) exports[module.name] = module.exports;
		});

		return exports;
	})([

		(function(module, exports, m_exports){
			var init = function(){
				var p = this;
				this.buttons.rate = this.wrap.main.querySelector("button.rate");
				this.wrap.rateContainer = this.wrap.main.querySelector(".btn_wrap#rate_btn .rate_wrap");
				p.info.rate = 1;

				var data = p._init_option["배속단계"];
				if(!data || data.length <= 1){
					exports.dispose.call(this)
					return;
				}

				this._isRateLock = p._init_option["배속제한"];

				data.forEach(function(i){
					var btn_tag = document.createElement("button");
					btn_tag.innerHTML = i;
					btn_tag.setAttribute("value", i);
					btn_tag.setAttribute("class","rate_btns")
					btn_tag.setAttribute("id", "x"+ i.replace('.',"_"));
					
					var btn = p.wrap.rateContainer.appendChild(btn_tag);

					btn.addEventListener("click", function(){
						p.rate = parseFloat(this.getAttribute("value"));
						var cl = p.buttons.rate.parentNode.classList;
						if(cl.contains("on")){
							cl.remove("on");
						}else{
							cl.add("on");
						}
					});
				});

				this.buttons.rates = this.wrap.rateContainer.querySelectorAll(".rate_btns");

				//이벤트 추가
				this.addEvent("RATE_LOCKED","rate_locked");

				function setIndex(np){
					p.wrap.rateContainer.querySelectorAll('.rate_btns').forEach(function(b){
						b.setAttribute("tabIndex",np);
					})
				}

				setIndex(-1)

				this.buttons.rate.addEventListener("click", function(){
					if(p.isProgCheck || !p._isRateLock ){
						var cl =this.parentNode.classList
						if(cl.contains("on")){
							cl.remove("on");
							setIndex(-1)
						}else{
							cl.add("on");
							setIndex(0)

						}
					}else{
						p.vod.trigger(m_exports.EVENT.MSG.RATE_LOCKED,"custom");
					}
				});

				setTimeout(function(){
					console.log("sdfsdfsdfsdfsdfsdfsfsdf")
					//var storage = p.localStorage.load("rate");
					//;(storage == "" || storage == undefined || (!p.isProgCheck && p._isRateLock))? p.rate=1 : p.rate=parseFloat(storage);	
					p.rate=1;//배속 유지 코드상 연수원에서 문제가 생긴 것으로 요청이와서 1로 유지하도록 버전 수정.
					p.vod.addEventListener(m_exports.EVENT.VOD.TIME_UPATE,function(){
						if(p.vod.playbackRate != p.rate){
							
							if(p.isProgCheck || !p._isRateLock){
								p.vod.playbackRate = p.rate
				
							}else{
								p.vod.playbackRate = p.rate = 1;
							}
						}
					});
					p.vod.onratechange =function(){
						p.vod.defaultPlaybackRate = p.vod.playbackRate
					}
				},100)
			
				return this;
			};

			module.name = "init";
			module.exports = init;
		}),
		
		(function(module, exports, m_exports){
			var ClassPrototype = {
				rate:{
					configurable:true,
					set:function(val){//_val Int 문으로 비교할 수 있도록 변경
						var p = this;
						val = parseFloat(val);

						var st_val = (val.toString().indexOf(".") == -1) ? val+".0" : val;
						
						var id = "x"+st_val.toString().replace(".","_");
						this.buttons.rate.innerHTML ="x"+st_val;
						
						this.buttons.rates.forEach(function(v){// 활성화 상태 초기화
							if(v.getAttribute("id") == id){
								v.classList.add("on");
							}else{
								v.classList.remove("on");
							}
						})
						
						p.localStorage.save("rate", val.toString());
						p.info.rate =val;
						return this;
					},
					get:function(){
						return this.info.rate;
					},
					enumerable:true
				}
			};
			
			module.name = "ClassPrototype";
			module.exports = ClassPrototype;
		}),
		(function(module,exports,m_exports){
			function dispose(){
				var btn = this.wrap.main.querySelector("button.rate");
				if(btn)	
					btn.parentNode.parentNode.removeChild(btn.parentNode);

				if(this.constructor.prototype.hasOwnProperty("rate"))
					Object.defineProperty(this.constructor.prototype,"rate",{set:function(){},get:function(){}});
				
				return this;
			}

			module.name = "dispose";
			module.exports =dispose
		})

		
	]);
}));

//kbc.player.bit_rate//////////////////////////////////////////////////////////////////////////////////
;(function(root, name, factory){
	if(root[name]){
		root[name].addModule("bit_rate", factory(root[name]));
	}else{
		throw new Error(name+" isn't defined.");
	}
}(window, "KbcPlayer", function(m_exports){
	return (function(modules){
		var exports = {};
		modules.forEach(function(m){
			var module = {name:"", exports:{}};
			m.call(modules.exports, module, exports, m_exports);
			if(module.name) exports[module.name] = module.exports;
		});

		return exports;
	})([

		(function(module, exports, m_exports){
			var init = function(){
				var p = this;
				var data = p._init_option["영상품질"];
				this.buttons.bit = this.wrap.main.querySelector("button.bit");
				if(!data || data.length == 0){
					data =[{name:"고화질",value:"4000k"}]
				}

				this.wrap.bitContainer = this.wrap.main.querySelector(".btn_wrap#bit_btn .bit_wrap");
				this.info.bit_rate = "";

				var storage = p.localStorage.load("bit");//이전 bit 데이터
				;this.info.bit_rate=(storage == "" || storage == undefined)?data.reverse()[0].value :storage;
				
				if(data.length == 1 || this.buttons.bit == null){
					exports.dispose.call(this);
					return;
				}

				data.forEach(function(v, i){
					var btn_tag = document.createElement("button");
					btn_tag.innerHTML = v.name;
					btn_tag.setAttribute("value", v.value);
					btn_tag.setAttribute("class","bit_btns")
					btn_tag.setAttribute("id", "bit_"+i);
					
					var btn = p.wrap.bitContainer.appendChild(btn_tag);
					if(btn.getAttribute("value") == p.info.bit_rate){//이전 bit 데이터에 맞는 버튼 설정
						btn.classList.add("on");
						p.buttons.bit.innerHTML = btn.innerHTML;
					}
					btn.addEventListener("click", function(){//bit 버튼 클릭
						p.changeBitrate(this.getAttribute("value"),p.currentTime);
					});
				});

				this.buttons.bits = this.wrap.bitContainer.querySelectorAll(".bit_btns");

				this.buttons.bit.addEventListener("click", function(){
					var ck_class = p.buttons.bit.parentNode.classList;
					if(ck_class.contains("on")){
						ck_class.remove("on");
					}else{
						ck_class.add("on");
					}
				});

				return this;
			};

			module.name = "init";
			module.exports = init;
		}),
		
		(function(module, exports, m_exports){
			var ClassPrototype = {};
			ClassPrototype.load = function(url){
				var p = this;

				console.log("url :: ", url)
				//return;
				if(!this.isInited){
					setTimeout(function(){						
						p.load(url);
					},100)
					return;
				} 
				
				this.unload();				
				this._vodsrc = url;

				if(url.indexOf(".m3u8") !=-1){
					if(m_exports.CAN_PLAY_HLS_BASIC){
						this.vod.src = url;
					}else if(m_exports.CAN_PLAY_HLS_JS){
						var hls = new Hls();
						hls.loadSource(url);
						hls.attachMedia(this.vod);
						hls.on(Hls.Events.MANIFEST_PARSED,function() {
							hls.off(Hls.Events.ERROR);
						});
						hls.on(Hls.Events.ERROR,function(e,data) {
							hls.destroy();
							throw new Error("HLS 영상 재생 불가");
						});
					}else{
						throw new Error("HLS 영상 재생 불가");
					}
				}else{
					//uniedu일 때 파일명 뒤에 _bitrate 안붙게 하는 코드 (기본적으로는 붙음)
					console.log("bit_rate : ", this.useModules)
					url = (this.useModules.indexOf("bit_rate") != -1) ? url : url = url.replace(".mp4","_"+this.info.bit_rate+".mp4");
					this.vod.src = url;
				}
				this.vod.addEventListener(m_exports.EVENT.VOD.TIME_UPATE,this.EVENT.CustomEventVOD);
				return this;
			}

			ClassPrototype.changeBitrate = function(bitrate,jumpsec){
				var p = this;
				var ck_class = p.buttons.bit.parentNode.classList;
				if(ck_class.contains("on")){
					ck_class.remove("on");
				}else{
					ck_class.add("on");
				}

				p.buttons.bits.forEach(function(v){// 활성화 상태 초기화
					if(v.getAttribute("value") == bitrate){
						v.classList.add("on")
						p.buttons.bit.innerHTML = v.innerHTML;
					}else{
						v.classList.remove("on");
					}
				})
				p.localStorage.save("bit",bitrate);//bit 쿠키 저장
				p.info.bit_rate = bitrate;
				p.load(p._vodsrc);
				if(jumpsec)
					p.play(jumpsec);
			}



			module.name = "ClassPrototype";
			module.exports = ClassPrototype;
		}),
		(function(module,exports,m_exports){
			function dispose(){
				var btn = this.wrap.main.querySelector("button.bit");
				if(btn)
					btn.parentNode.parentNode.removeChild(btn.parentNode);

				if(this.constructor.prototype.hasOwnProperty("changeBitrate"))
					delete this.constructor.prototype.changeBitrate;

				return this;
			}

			module.name = "dispose";
			module.exports =dispose
		})		
	]);
}));

//kbc.player.seek_thumb//////////////////////////////////////////////////////////////////////////////////
;(function(root,name,factory){
	if(root[name]){
		root[name].addModule("seek_thumb",factory(root[name]));
	}else{
		throw new Error(name+" isn't defined.")
	}
}(window,"KbcPlayer",function(m_exports){
	return(function(modules){
		var exports = {};
		modules.forEach(function(m){
			var module = {name:"",exports:{}};
			m.call(module.exports,module,exports,m_exports);
			if(module.name)exports[module.name] = module.exports;
		});
		return exports;
	})([
		(function(module,exports,m_exports){
			var init = function(){
                if(m_exports.IS_MOB){
					exports.dispose.call(this);
					return this;
                }
				var p = this;

                var seek_thumb = p.wrap.seek_thumb = p.wrap.control.querySelector(".bar_wrap#progress .seek_thumb");
                var thumb_canvas = null,time_wrap =null,capture_imgs={};
				if(!seek_thumb){
					p.wrap.seek_thumb = document.createElement("div");
					p.wrap.seek_thumb.classList.add("seek_thumb");
					p.wrap.control.querySelector(".bar_wrap#progress").appendChild(p.wrap.seek_thumb);
				}					
                    
                    p.wrap.seek_thumb.style.width ="162px";
                    p.wrap.seek_thumb.style.height = (160*9/16+2)+"px";
                    
                    p.wrap.thumb_canvas = document.createElement("canvas");
                    p.wrap.thumb_canvas.width = 160;
                    p.wrap.thumb_canvas.height =p.wrap.thumb_canvas.width*9/16;
                    p.wrap.thumb_canvas.style.width = "100%";
                    p.wrap.thumb_canvas.style.height = "100%";
                    p.wrap.thumb_canvas.style.backgroundColor ="#000000";

                    p.wrap.seek_thumb.appendChild(p.wrap.thumb_canvas);

                    time_wrap = document.createElement("div");
                    p.wrap.seek_thumb.appendChild(time_wrap);
                    time_wrap.classList.add("time_wrap");

                    seek_thumb = p.wrap.seek_thumb;
                    thumb_canvas = p.wrap.thumb_canvas;
                
/* 				}else{
                    thumb_canvas = p.wrap.thumb_canvas = p.wrap.seek_thumb.querySelector("canvas");
                    time_wrap = p.wrap.seek_thumb.querySelector(".seek_time");
                } */
                
                var vod_clone = p.vod_clone = null;
                var captureGab = 5,seekTimer = null;
                
                this.vod.addEventListener(m_exports.EVENT.VOD.LOAD_DATA,function(){
					clearTimeout(seekTimer);
                    capture_imgs = {};

                    vod_clone = this.cloneNode(true);
                   
                    vod_clone.addEventListener(m_exports.EVENT.VOD.SEEKING,function(){
                        //thumb_canvas.getContext("2d").clearRect(0,0,thumb_canvas.width,thumb_canvas.height);
                    })

                    vod_clone.addEventListener(m_exports.EVENT.VOD.SEEKED,function(){

						var oc = document.createElement('canvas');
						var octx = oc.getContext('2d');
						oc.width =this.videoWidth;oc.height = this.videoHeight;
						octx.filter = "blur("+oc.width/(thumb_canvas.width*2)+"px)"
						octx.drawImage(this,0,0);

						var ctx = thumb_canvas.getContext("2d")
						ctx.clearRect(0,0,thumb_canvas.width,thumb_canvas.height);
						ctx.drawImage(oc,0,0,oc.width,oc.height,0,0,thumb_canvas.width,thumb_canvas.height);

                        var idx ="img_"+Math.floor(Math.floor(this.currentTime)/captureGab)*captureGab;
                        if(!capture_imgs[idx]){
                            capture_imgs[idx] = new Image();
                            capture_imgs[idx].src = thumb_canvas.toDataURL();
                        } 
                    })

                })

				this.range.pwrap.addEventListener("mousemove",function(e){
               
					if(e.target.parentNode != p.range.pwrap){
						seek_thumb.classList.remove("on")
					}else{
						var thumbRect = seek_thumb.getBoundingClientRect();
						var pBarRect = p.range.pThumb.parentNode.getBoundingClientRect();

						var gabMin = Math.max(0,thumbRect.width/2-pBarRect.left+2)/pBarRect.width
						var gabMax = (pBarRect.right-thumbRect.width/2-2)/pBarRect.width;
	                                     
                        var per = Math.min(gabMax,e.offsetX/p.range.pThumb.parentNode.clientWidth);
                        per = Math.max(per,gabMin);


                        seek_thumb.style.left= 100*per +"%";
                        time_wrap.innerHTML = m_exports.convertTime(p.duration*per,"m:s")
                        seek_thumb.classList.add("on");

                        if(vod_clone){

							var capture_time = Math.floor(Math.min(p.duration-1,p.duration*per));
								capture_time = Math.max(capture_time,1);

							var idx ="img_"+Math.floor(capture_time/captureGab)*captureGab;

							clearTimeout(seekTimer);
							if(capture_imgs[idx]){
								var ctx = thumb_canvas.getContext("2d")
								ctx.clearRect(0,0,thumb_canvas.width,thumb_canvas.height);
								ctx.drawImage(capture_imgs[idx],0,0,thumb_canvas.width,thumb_canvas.height);
							}else{
								seekTimer = setTimeout(function(){
									vod_clone.currentTime = capture_time;
								},300);
							}
                        } 
                            
					}
                });
                
				this.range.pwrap.addEventListener("mouseout",function(event){
					var e = event.toElement || event.relatedTarget;
					if(e == event.target) return;
					if(p.range.pwrap.contains(e)) return;

					seek_thumb.classList.remove("on")
				});

				return this;
			};


			module.name = "init";
			module.exports =init
		}),
		(function(module,exports,m_exports){
			function dispose(){
				var wrap =  this.wrap.main.querySelector(".seek_thumb");
				if(wrap)	
					wrap.parentNode.removeChild(wrap);
				
				return this;
			}

			module.name = "dispose";
			module.exports =dispose
		}),
	]);
}));
